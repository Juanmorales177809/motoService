--------------------------by Caliche--------------------------
------------------------INICIAR SERVER------------------------

// creacion package.json

npm init -yes

// crear app.js
//A continuación, instale Express en el directorio myapp y guárdelo en la lista de dependencia
npm install express
//Importar bibliotecas para iniciar el servidor
const express = require('express')
const app = express();
const port = 3000

  
  app.listen(port,function server() {
    console.log("Server running on port: " + port);
    console.log(`Example app listening at http://localhost:${port}`)
  })
//Correr server
node app.js
// en package.json
//agregar a scripts
"start": "nodemon app.js"
//con esto se corre el servidor con:
npm start
----------------------------nodemon------------------------------
//Automatizar server para que sereiniie cada ves que haceos cambios en la configuracion
npm i nodemon --dev
--------------------------ENDPOINTS-------------------------------
//en app.js
app.get('/get-service', function getService(req,res) {
  res.send('OK');
})
//req = resive una respuesta del cliente; res = envia una respuesta alcliente
// '/get-service' es el end point

-----------------------------Postman------------------------------
//Para probar apis https://www.postman.com/downloads/
//Desde postman se envia un archivo jason atraves de el body al localhost
//en app.js de configura el envio y recibido del archivo json
app.post('/add-service',(req,res)=>{
  console.log(req.body)
  res.json(req.body)
})

-------------------------DEFINIR MIDLEWARS------------------------
// Configurar el servidor para recibir datos como json
app.use(express.json());

-------------------------npmjs---------------------------------
//Para comunicarse con la base de datos mysql
https://www.npmjs.com/package/mysql2
$npm install mysql2
//En app.js crear variable connection que permite hacer los queris

const mysql      = require('mysql2/promise');
const bluebird = require('bluebird');
let connection; 

app.use(express.json());

app.post('/add-service', async (req,res)=>{
  const service = req.body;
  const detalle = service.detalle;
  const valor = service.valor;
  const estado = service.estado;
  await connection.execute(`INSERT INTO servicios ( detalle, valor, estado) VALUES( '${detalle}', ${valor},'${estado}')`);
  res.json(service)
})

  app.listen(port, async() => {
    connection = await mysql.createConnection({
      host     : 'localhost',
      user     : 'root',
      password : 'admin',
      database : 'Lavadero',
      Promise : bluebird
    });
    
    console.log("Server running on port: " + port);
})
//el paquete bluebird se debe instalar
$npm i bluebird

-------------------------------Destructuración-------------------------------
//Integración react con api a base de datos
//Instalar extensión
ES7 React/Redux/GraphQL/React-Native snippets
rfce == componente rapido

-----------------------TRAER JSON-------------------------------------------
const getServices = async()=>{
        const response  = await fetch("http://localhost:3001");
        const jsonResponse = await response.json();
    }
    return (
//instalar paquete cors
npm i cors









